import { NextRequest, NextResponse } from "next/server";
import Group from "@/models/Group";
import GroupMember from "@/models/GroupMember";
import { getSessionUser } from "@/utils/auth";
import GroupInvitation from "@/models/GroupInvitation"; // Import GroupInvitation model
import { sendEmail } from "@/lib/sendEmail"; // Import sendEmail utility
import { getGroupInviteEmailTemplate } from "@/templates/groupInviteEmail"; // Assuming this template exists or will be created
import { Op } from "sequelize"; // Import Op for sequelize operators
import User from "@/models/User"; // Import User model
import Deal from "@/models/Deal"; // Import Deal model to get deal title
import { getUser } from "@/server/user.actions";
import Notification from "@/models/Notification"; // Import Notification model

// POST /api/user/group/[groupId]/invite - Invite a user to a group
export async function POST(req: NextRequest, { params }: any) {
  try {
    const user = await getUser();

    if (!user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { groupId } = params;
    if (!groupId) {
      return NextResponse.json(
        { error: "groupId is required" },
        { status: 400 }
      );
    }

    const body = await req.json();
    const { inviteEmail } = body;

    if (!inviteEmail) {
      return NextResponse.json(
        { error: "inviteEmail is required" },
        { status: 400 }
      );
    }

    // Basic email format validation (can be enhanced)
    if (!/^[\w-]+(?:\.[\w-]+)*@(?:[\w-]+\.)+[a-zA-Z]{2,7}$/.test(inviteEmail)) {
      return NextResponse.json(
        { error: "Invalid email format" },
        { status: 400 }
      );
    }

    const group = await Group.findByPk(groupId, {
      include: [{ model: Deal, as: "deal" }],
    }); // Include Deal to get title
    if (!group) {
      return NextResponse.json({ error: "Group not found" }, { status: 404 });
    }

    // Only group members can invite
    const isMember = await GroupMember.findOne({
      where: { groupId, userId: user.id },
    });

    if (!isMember) {
      return NextResponse.json(
        { error: "Not a group member" },
        { status: 403 }
      );
    }

    // Check if the invitee email corresponds to an existing user
    const inviteeUser = await User.findOne({
      where: { email: inviteEmail },
    });

    if (!inviteeUser) {
      return NextResponse.json(
        { error: "invite is not a registered user" },
        { status: 400 }
      );
    }

    // Check if the invitee is already a member of this group
    const isinviteAlreadyMember = await GroupMember.findOne({
      where: { groupId, userId: inviteeUser.id },
    });

    if (isinviteAlreadyMember) {
      return NextResponse.json({
        message: "invite is already a member of this group",
      });
    }

    // Check if an active invitation already exists for this email and group
    const existingInvitation = await GroupInvitation.findOne({
      where: {
        groupId,
        inviteEmail,
        expiresAt: { [Op.gt]: new Date() }, // Check if not expired
      },
    });

    if (existingInvitation) {
      return NextResponse.json({
        message: "An active invitation already exists for this email",
      });
    }

    // Generate invitation token and expiration date (e.g., 60 days from now)
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000 * 60); // 60 days

    // Create GroupInvitation record
    const invitation = await GroupInvitation.create({
      groupId,
      inviteEmail,
      expiresAt,
      // token is auto-generated by UUIDV4 in model definition
    });

    // Construct invitation URL (assuming a frontend route /group/invite)
    const invitationUrl = `${process.env.DOMAIN}/group/invite/${invitation.token}`;

    // Send invite email
    try {
      // Assuming getGroupInviteEmailTemplate and sendEmail are implemented

      await sendEmail({
        to: inviteEmail,
        subject: "You've been invited to join a group deal on Kuponna!",
        body: getGroupInviteEmailTemplate({
          inviterName: user.name || "Group Member",
          dealTitle: group.deal?.title || "Group Deal", // Use deal title from included deal
          invitationUrl,
        }),
      });

      // Create notification for the invited user
      if (inviteeUser) {
        await Notification.create({
          userId: inviteeUser.id,
          type: "deal", // Or a specific 'group_invite' type if added later
          title: "Group Invitation Received",
          message: `${
            user.name || "Someone"
          } invited you to join a group for '${
            group.deal?.title || "a group deal"
          }'. Check your email for details.`,
          read: false,
          url: `/group/invite/${invitation.token}`, // Link to the invitation
        });
      }
    } catch (emailError) {
      console.error("Error sending invitation email:", emailError);
      // Decide how to handle email sending failure - maybe still create invitation but log error?
      // For now, we'll return an error response.
      return NextResponse.json(
        { error: "Failed to send invitation email" },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      message: "Invite sent successfully",
      inviteEmail,
      groupId,
      invitationToken: invitation.token, // Optionally return token for testing/debugging
    });
  } catch (error) {
    console.error("Error sending group invitation:", error);
    return NextResponse.json(
      { error: "Failed to send invitation" },
      { status: 500 }
    );
  }
}
